#user  nobody;
worker_processes  16;

error_log  /usr/local/openresty/nginx/logs/error.log warn;

pid        /usr/local/openresty/nginx/logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  /usr/local/openresty/nginx/logs/access.log  main;
    access_log off;

    include /usr/local/bin/nginx/conf.d/https/*.conf;

    # circuit breaker init
    lua_shared_dict fuse_shard_dict 10m;
    init_worker_by_lua_block {
        local cb = require "auth/circuit_breaker"
        cb:setup(function(this)
            this.REQUEST_TIMEOUT = 1
            this.FUSED_DURATION = 10
            this.FAILS_LIMIT = 10
            this.LIFETIME = 15
		end)
	}

    # limit req/conn define
    limit_req_zone $binary_remote_addr zone=perip_rps:1m rate=50r/s;
    limit_req_zone $server_name zone=perserver_rps:10m rate=1000r/s;
    limit_conn_zone $binary_remote_addr zone=perip_conn:1m;
    limit_conn_zone $server_name zone=perserver_conn:10m;

    # proxy setting
    proxy_buffering on; # Enables or disables buffering of responses from the proxied server.
    proxy_buffer_size 32k; # Sets the size of the buffer used for reading the first part of the response received from the proxied server
    proxy_buffers 32 32k; # Sets the number and size of the buffers used for reading a response from the proxied server
    proxy_busy_buffers_size 64k; #（proxy_buffers*2） When buffering of responses from the proxied server is enabled, limits the total size of buffers that can be busy sending a response to the client while the response is not yet fully read
    proxy_temp_file_write_size 128k; # Limits the size of data written to a temporary file at a time

    # 动态访问，需要授权token
    server {
        listen 443 ssl;
        server_name  localhost;

        #gzip  on;
        charset utf-8;

        # 上传文件最大20M
        client_max_body_size 20m;

        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        ssl_certificate   /usr/local/openresty/nginx/cert/primary.pem;
        ssl_certificate_key  /usr/local/openresty/nginx/cert/key.pem;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_session_timeout 5m;
        ssl_session_cache shared:SSL:50m;


        # lua_code_cache is off; this will hurt performance
        #lua_code_cache off;
        access_by_lua_file /usr/local/openresty/lualib/auth/auth.lua;

        log_by_lua_block {
            local cb = require "auth/circuit_breaker"
            cb:run_log()
        }

        location / {
            root   /usr/local/openresty/nginx/html;
            index  index.html index.htm;
        }

        # services
        #判断tags是否是public{{range .Tags}}{{if eq . "public" }}{{end}}{{end}}
        {{range services}}{{$service:=.Name}}{{if and (service $service "passing") (not ($service |regexMatch "consul*")) (not ($service |regexMatch "nginx*"))  (not ($service |regexMatch "gateway*")) (not ($service |regexMatch "redis*")) (not ($service |regexMatch "mysql*")) (not ($service |regexMatch "rabbitmq*"))  (not ($service |regexMatch "visualizer*"))  (not ($service |regexMatch "mqtt*"))  (not ($service |regexMatch "emq*"))  (not ($service |regexMatch "prometheus*"))  (not ($service |regexMatch "stats*"))  (not ($service |regexMatch "python*")) }}
        location  /{{$service}}/ {
            limit_req zone=perip_rps burst=20 nodelay;
            limit_req zone=perserver_rps burst=200 nodelay;
            limit_conn perip_conn 10;
            limit_conn perserver_conn 10000;
            limit_rate 100k;
            proxy_pass http://{{$service}};
        }
        {{end}}{{end}}
    }

    # 静态访问
    server {
        listen 663 ssl;
        server_name  localhost;

        #gzip  on;
        charset utf-8;

        # 上传文件最大20M
        client_max_body_size 20m;

        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        ssl_certificate   /usr/local/openresty/nginx/cert/primary.pem;
        ssl_certificate_key  /usr/local/openresty/nginx/cert/key.pem;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_session_timeout 5m;
        ssl_session_cache shared:SSL:50m;

        access_by_lua_block {
            local cb = require "auth/circuit_breaker"
            cb:run_access()
        }


        log_by_lua_block {
            local cb = require "auth/circuit_breaker"
            cb:run_log()
        }

        location / {
            root   /usr/local/openresty/nginx/html;
            index  index.html index.htm;
        }

        # services
        #判断tags是否是public{{range .Tags}}{{if eq . "public" }}{{end}}{{end}}
        {{range services}}{{$service:=.Name}}{{if and (service $service "passing") (not ($service |regexMatch "consul*")) (not ($service |regexMatch "nginx*"))  (not ($service |regexMatch "gateway*")) (not ($service |regexMatch "redis*")) (not ($service |regexMatch "mysql*")) (not ($service |regexMatch "rabbitmq*"))  (not ($service |regexMatch "visualizer*"))  (not ($service |regexMatch "mqtt*"))  (not ($service |regexMatch "emq*"))  (not ($service |regexMatch "prometheus*"))  (not ($service |regexMatch "stats*"))  (not ($service |regexMatch "python*")) }}
        location  /{{$service}}/ {
            limit_req zone=perip_rps burst=20 nodelay;
            limit_req zone=perserver_rps burst=200 nodelay;
            limit_conn perip_conn 10;
            limit_conn perserver_conn 10000;
            limit_rate 100k;
            proxy_pass http://{{$service}};
        }
        {{end}}{{end}}

        # websocket service
        {{range services}}{{$service:=.Name}}{{if and (service $service "passing") ($service |regexMatch "websocket*") }}
        location /ws {
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            proxy_pass http://{{$service}}_ws/ws;

        }
        {{end}}{{end}}

    }

    # Upstreams
    {{range services}}{{$service:=.Name}}{{if and (service $service "passing") (not ($service |regexMatch "consul*")) (not ($service |regexMatch "nginx*"))  (not ($service |regexMatch "gateway*")) (not ($service |regexMatch "redis*")) (not ($service |regexMatch "mysql*")) (not ($service |regexMatch "rabbitmq*"))  (not ($service |regexMatch "visualizer*"))  (not ($service |regexMatch "mqtt*"))  (not ($service |regexMatch "emq*"))  (not ($service |regexMatch "grafana*")) (not ($service |regexMatch "prometheus*")) (not ($service |regexMatch "stats*"))  (not ($service |regexMatch "python*")) }}
    upstream {{$service}} { {{range service $service }}
        server {{.Address}}:{{.Port}};{{end}}
    }
    {{end}}{{end}}

    # Upstreams-websocket, 每个请求按客户端IP的hash结果分配，当新的请求到达时，先将其客户端IP通过哈希算法哈希出一个值，在随后的客户端请求中，客户IP的哈希值只要相同，就会被分配至同一台服务器，该调度算法可以解决动态网页的session共享问题，但有时会导致请求分配不均，即无法保证1：1的负载均衡，因为在国内大多数公司都是NAT上网模式，多个客户端会对应一个外部IP，所以，这些客户端都会被分配到同一节点服务器，从而导致请求分配不均。
    {{range services}}{{$service:=.Name}}{{if and (service $service "passing") ($service |regexMatch "websocket*") }}
    upstream {{$service}}_ws {
        ip_hash;
        {{range service $service }}
        server {{.Address}}:{{.Port}};{{end}}
    }
    {{end}}{{end}}
}
